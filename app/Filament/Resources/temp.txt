<?php

namespace App\Filament\Resources;

use Filament\Forms;
use Filament\Tables;
use App\Models\Order;
use Filament\Forms\Set;
use Filament\Forms\Form;
use Filament\Tables\Table;
use Illuminate\Support\Str;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use App\Filament\Forms\FieldUtils;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Filters\SelectFilter;
use Illuminate\Database\Eloquent\Builder;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;
use App\Filament\Resources\OrderResource\Pages;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use App\Filament\Resources\OrderResource\RelationManagers;
use Filament\Forms\Components\Hidden;

class OrderResource extends Resource
{
    protected static ?string $model = Order::class;

    protected static ?string $navigationIcon = 'heroicon-o-shopping-bag';

    protected static ?string $navigationLabel = 'Pesanan';

    protected static ?string $navigationGroup = 'Transaksi';

    protected static ?int $navigationSort = -3;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Order Information')
                    ->schema([
                        Forms\Components\TextInput::make('order_code')
                            ->required()
                            ->label('Kode Pesanan')
                            ->unique(ignoreRecord: true)
                            ->default(fn() => 'ORD-' . date('Ymd') . '-' . str_pad(rand(1, 9999), 4, '0', STR_PAD_LEFT))
                            ->readOnly()
                            ->columnSpanFull(),

                        Forms\Components\Select::make('customer_id')
                            ->relationship(
                                name: 'customer',
                                titleAttribute: 'name',
                                modifyQueryUsing: fn(Builder $query) => $query->where('is_active', true)
                            )
                            ->searchable()
                            ->label('Pelanggan')
                            ->preload()
                            ->createOptionForm([
                                Forms\Components\TextInput::make('customer_code')
                                    ->label('Kode Pelanggan')
                                    ->unique(ignoreRecord: true)
                                    ->required()
                                    ->placeholder('Enter code')
                                    ->suffixAction(
                                        Forms\Components\Actions\Action::make('generate')
                                            ->label('Generate Code')
                                            ->icon('heroicon-o-arrow-path')
                                            ->action(fn(Set $set) => $set('customer_code', strtoupper(Str::random(8))))
                                    ),
                                Forms\Components\TextInput::make('name')
                                    ->label('Nama Pelanggan')
                                    ->required()
                                    ->maxLength(255),
                                FieldUtils::applyNumericSanitizer(
                                    Forms\Components\TextInput::make('phone')
                                        ->label('Nomor Telepon')
                                        ->tel()
                                        ->required()
                                        ->prefix('+62')
                                        ->rules(['digits_between:10,13'])
                                        ->placeholder('e.g. 81234567890')
                                        ->validationMessages([
                                            'numeric' => 'Nomor Telepon harus berupa angka.',
                                            'digits_between' => 'Nomor Telepon harus terdiri dari 10 hingga 13 digit angka.',
                                            'regex' => 'Format Nomor Telepon tidak valid. e.g. 81234567890',
                                        ]),
                                    'phone',
                                    13
                                ),
                                Forms\Components\TextInput::make('email')
                                    ->label('Email')
                                    ->email()
                                    ->maxLength(200)
                                    ->visible(function ($livewire, $record) {
                                        return !($livewire instanceof \Filament\Resources\Pages\ViewRecord) || !filled($record?->email);
                                    })
                                    ->validationMessages([
                                        'max' => 'Email tidak boleh lebih dari 200 karakter.',
                                        'email' => 'Email tidak valid.',
                                    ]),
                                Forms\Components\TextArea::make('address')
                                    ->label('Alamat')
                                    ->required()
                                    ->reactive()
                                    ->hint(fn($state) => strlen($state) . '/200')
                                    ->hintColor('gray')
                                    ->validationMessages([
                                        'required' => 'Alamat wajib diisi.',
                                    ]),
                                Forms\Components\TextArea::make('notes')
                                    ->label('Catatan')
                                    ->reactive()
                                    ->hint(fn($state) => strlen($state) . '/200')
                                    ->hintColor('gray'),
                                Forms\Components\Select::make('gender')
                                    ->label('Jenis Kelamin')
                                    ->required()
                                    ->options([
                                        'male' => 'Laki-Laki',
                                        'female' => 'Perempuan',
                                    ])
                                    ->validationMessages([
                                        'required' => 'Jenis Kelamin wajib diisi.',
                                    ]),
                                Forms\Components\Toggle::make('is_active')
                                    ->label('Status')
                                    ->required()
                                    ->default(true),
                            ])
                            ->required(),

                        Forms\Components\DateTimePicker::make('order_date')
                            ->label('Tanggal Pesanan')
                            ->required()
                            ->default(now()),
                        Forms\Components\Hidden::make('user_id')
                            ->default(auth()->user()->id),
                    ])->columns(2),

                Forms\Components\Section::make('Order Details')
                    ->schema([
                        Forms\Components\DateTimePicker::make('pickup_date')
                            ->label('Tanggal Pengambilan'),
                        Forms\Components\DateTimePicker::make('delivery_date')
                            ->label('Tanggal Pengiriman'),
                        Forms\Components\DateTimePicker::make('estimated_finish')
                            ->label('Tanggal Selesai Estimasi'),
                        Forms\Components\Select::make('status')
                            ->options([
                                'pending' => 'Pending',
                                'confirmed' => 'Confirmed',
                                'in_progress' => 'In Progress',
                                'washing' => 'Washing',
                                'drying' => 'Drying',
                                'ironing' => 'Ironing',
                                'ready' => 'Ready',
                                'delivered' => 'Delivered',
                                'completed' => 'Completed',
                                'cancelled' => 'Cancelled',
                            ])
                            ->required()
                            ->default('pending'),

                        Forms\Components\Select::make('payment_status')
                            ->options([
                                'unpaid' => 'Unpaid',
                                'partial' => 'Partial',
                                'paid' => 'Paid',
                                'refunded' => 'Refunded',
                            ])
                            ->required()
                            ->default('unpaid'),

                        Forms\Components\Select::make('pickup_type')
                            ->options([
                                'customer_drop' => 'Customer Drop Off',
                                'pickup_service' => 'Pickup Service',
                            ]),

                        Forms\Components\Select::make('delivery_type')
                            ->options([
                                'customer_pickup' => 'Customer Pickup',
                                'delivery_service' => 'Delivery Service',
                            ]),
                    ])->columns(2),

                Forms\Components\Section::make('Pricing')
                    ->schema([
                        Forms\Components\TextInput::make('total_weight')
                            ->numeric()
                            ->step(0.1)
                            ->suffix('kg'),

                        Forms\Components\TextInput::make('total_items')
                            ->numeric()
                            ->default(0),

                        Forms\Components\TextInput::make('subtotal')
                            ->numeric()
                            ->prefix('Rp')
                            ->default(0),

                        Forms\Components\TextInput::make('discount_amount')
                            ->numeric()
                            ->prefix('Rp')
                            ->default(0),

                        Forms\Components\TextInput::make('tax_amount')
                            ->numeric()
                            ->prefix('Rp')
                            ->default(0),

                        Forms\Components\TextInput::make('additional_fee')
                            ->numeric()
                            ->prefix('Rp')
                            ->default(0),

                        Forms\Components\TextInput::make('total_amount')
                            ->numeric()
                            ->prefix('Rp')
                            ->required(),
                    ])->columns(3),

                Forms\Components\Section::make('Additional Information')
                    ->schema([
                        Forms\Components\Textarea::make('pickup_address')
                            ->rows(2),
                        Forms\Components\Textarea::make('delivery_address')
                            ->rows(2),
                        Forms\Components\Textarea::make('notes')
                            ->rows(3),
                    ])->columns(1),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('order_code')
                    ->searchable()
                    ->sortable()
                    ->copyable(),

                Tables\Columns\TextColumn::make('customer.name')
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('order_date')
                    ->dateTime('d/m/Y H:i')
                    ->sortable(),

                Tables\Columns\BadgeColumn::make('status')
                    ->colors([
                        'secondary' => 'pending',
                        'warning' => 'confirmed',
                        'primary' => 'in_progress',
                        'info' => ['washing', 'drying', 'ironing'],
                        'success' => ['ready', 'delivered', 'completed'],
                        'danger' => 'cancelled',
                    ]),

                Tables\Columns\BadgeColumn::make('payment_status')
                    ->colors([
                        'danger' => 'unpaid',
                        'warning' => 'partial',
                        'success' => 'paid',
                        'secondary' => 'refunded',
                    ]),

                Tables\Columns\TextColumn::make('total_amount')
                    ->money('IDR')
                    ->sortable(),

                Tables\Columns\TextColumn::make('delivery_date')
                    ->dateTime('d/m/Y')
                    ->sortable(),
            ])
            ->filters([
                SelectFilter::make('status')
                    ->options([
                        'pending' => 'Pending',
                        'confirmed' => 'Confirmed',
                        'in_progress' => 'In Progress',
                        'ready' => 'Ready',
                        'completed' => 'Completed',
                    ]),

                SelectFilter::make('payment_status')
                    ->options([
                        'unpaid' => 'Unpaid',
                        'partial' => 'Partial',
                        'paid' => 'Paid',
                    ]),

                Tables\Filters\Filter::make('order_date')
                    ->form([
                        Forms\Components\DatePicker::make('from'),
                        Forms\Components\DatePicker::make('until'),
                    ])
                    ->query(function ($query, array $data) {
                        return $query
                            ->when($data['from'], fn($q) => $q->whereDate('order_date', '>=', $data['from']))
                            ->when($data['until'], fn($q) => $q->whereDate('order_date', '<=', $data['until']));
                    }),
            ])
            ->actions([
                ActionGroup::make([
                    Tables\Actions\ViewAction::make(),
                    Tables\Actions\EditAction::make(),
                    Tables\Actions\Action::make('print_receipt')
                        ->icon('heroicon-o-printer')
                        ->url(fn(Order $record) => route('orders.receipt', $record))
                        ->openUrlInNewTab(),
                ]),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('order_date', 'desc');
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Section::make('Order Information')
                    ->schema([
                        TextEntry::make('order_code')->label('Order Code'),
                        TextEntry::make('customer.name')->label('Customer'),
                        TextEntry::make('status')->badge(),
                        TextEntry::make('payment_status')->badge(),
                        TextEntry::make('order_date')->dateTime(),
                        TextEntry::make('delivery_date')->dateTime(),
                    ])->columns(2),

                Section::make('Items')
                    ->schema([
                        TextEntry::make('items')
                            ->listWithLineBreaks()
                            ->getStateUsing(
                                fn(Order $record) =>
                                $record->items->map(
                                    fn($item) =>
                                    "{$item->name} (Qty: {$item->quantity})"
                                )->toArray()
                            ),
                    ]),

                Section::make('Payment Details')
                    ->schema([
                        TextEntry::make('subtotal')->money('IDR'),
                        TextEntry::make('discount_amount')->money('IDR'),
                        TextEntry::make('tax_amount')->money('IDR'),
                        TextEntry::make('total_amount')->money('IDR'),
                        TextEntry::make('paid_amount')->money('IDR'),
                    ])->columns(2),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListOrders::route('/'),
            'create' => Pages\CreateOrder::route('/create'),
            'view' => Pages\ViewOrder::route('/{record}'),
            'edit' => Pages\EditOrder::route('/{record}/edit'),
        ];
    }
}
